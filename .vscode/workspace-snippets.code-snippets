{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "New Util": {
    "scope": "typescript,typescriptreact",
    "prefix": "util",
    "body": [
      "const ${1:${TM_FILENAME_BASE/(-([a-zA-Z]))/${2:/upcase}/g}} = ($2) => $3",
      "",
      "export default $1"
    ],
    "description": "Create a new Util"
  },
  "Create a component": {
    "scope": "typescriptreact",
    "prefix": "component",
    "body": [
      "import React from 'react'",
      "",
      "export interface ${1:${TM_FILENAME_BASE/(^[a-zA-Z])|(-([a-zA-Z]))/${1:/upcase}${3:/upcase}/g}}Props {$2}",
      "",
      "const $1 = ({${2/\n([^:?]+)\\??:([^\\n]+)/\n$1,/g}}: $1Props) => {",
      "\treturn (",
      "\t\t$3",
      "\t)",
      "}",
      "",
      "export default $1"
    ],
    "description": "Create a functional component"
  },
  "Export default from other file": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "ed",
    "body": [
      "export { default as ${1:ModuleName} } from '${2:./${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}}'"
    ],
    "description": "Create a default export from another file"
  },
  "Export default from current file": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "ed",
    "body": ["export default ${1:name}"],
    "description": "Create a default export from the current file"
  },
  "Export * as named export from other file": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "estarn",
    "body": [
      "export * as ${1:ModuleName} from '${2:./${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}}'"
    ],
    "description": "Export all named exports from other file"
  },
  "Export * from other file": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "estar",
    "body": ["export * from './${1:path}'"],
    "description": "Export all named exports from other file"
  },
  "Create a snippet": {
    "scope": "jsonc",
    "body": [
      "\"${1:Snippet Name}\": {",
      "\t\"scope\": \"${2:typescript,javascript,typescriptreact}\",",
      "\t\"prefix\": \"$3\",",
      "\t\"body\": [",
      "\t\t\"${4}\",$5",
      "\t],",
      "\t\"description\": \"${6:$1}\"",
      "},"
    ],
    "prefix": "snip",
    "description": "Create a snippet"
  },
  "Create an interface": {
    "scope": "typescript,javascript,typescriptreact",
    "body": [
      "export interface ${1:Name} {",
      "\t${2:property}: ${3:value}$4",
      "}"
    ],
    "prefix": "int",
    "description": "Create an interface"
  },
  "If": {
    "scope": "shellscript",
    "prefix": "if",
    "body": ["if [ ${1:\"\\${${2}\\}\" = \"${3}\"} ]; then", "\t${4}", "fi"],
    "description": "If statement"
  },
  "Elif": {
    "scope": "shellscript",
    "prefix": "elif",
    "body": ["elif [ ${1:\"\\${${2}\\}\" = \"${3}\"} ]; then"],
    "description": "Elif"
  },
  "Variable": {
    // "scope": "shellscript",
    "prefix": "var",
    "body": ["\"\\${$1}\""],
    "description": "Variable"
  },
  "Describe unit test": {
    "scope": "typescript,typescriptreact",
    "prefix": "describe",
    "body": [
      "describe('${1:${TM_FILENAME_BASE/(-([a-zA-Z]))|(\\.[^$]+$)/${2:/upcase}/g}}', () => {",
      "\tit('${2:should do a thing}', () => {",
      "\t\texpect(${3:actual}).${4:toBe}(${5:expected})",
      "\t})",
      "})",
      "",
      "export {}"
    ],
    "description": "Describe unit test"
  },
  "it": {
    "scope": "typescript,typescriptreact",
    "prefix": "it",
    "body": [
      "it('${1:should do a thing}', () => {",
      "\texpect(${2:actual}).${3:toBe}(${4:expected})",
      "})"
    ],
    "description": "it"
  },
  "expect": {
    "scope": "typescript,typescriptreact",
    "prefix": "expect",
    "body": ["expect(${1:actual}).${2:toBe}()"],
    "description": "expect"
  }
}
